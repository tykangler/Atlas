// the coference resolver doesn't need to take in a whole token list. It doesn't need to know
// whether something is a list, or an interlink, or a table, or a section. 
// It's only job will be to resolve coreferences within a block of text and resolve them to a noun phrase.

// Leave the job of cleaning the input to the caller. 
// + lists should be sent one item at a time
// + tables should not be sent
// + sections should not be sent
// + links should be converted to text

// Ideally we'll send a plaintext article. But how do we map a list of tokens to a plaintext article, then map the resulting
// article back into a list of tokens. 

// So maybe we do just send a list of tokens in the end. The result will be a list of tokens marking nouns that are coreferences and the 
// antecedents they are most likely to resolve to

// but the messages can be simpler. We only need a plaintext tokens. The delimiter will be the token delimiters, just without the extra
// information about url, etc... 

// how about list items? These are structured like a tree. When iterating through the response, and iterating through the token list. We
// can see the start of the list, and determine whether the response is referring to a list item.

// either that or we can send list items as part of a separate request. NO.

// concern: We are excluding text when we do the initial token parsing. There is a chance that we leave out antecedents and the coreferences resolve to 
// the incorrect antecedent. It shouldn't be a problem though. We aren't excluding anything important, just tables, and citations, etc.

// resolving coreferences: There is a whole process outlined in resolving_coreferences.ipynb. But it's complex. We know the article subject, can just find that
// to determine the antecedent.

syntax = "proto3";

package Atlas.CoreferenceResolver;

// Interface exported by the server.
/* resolve coreferences given a stream of tokens and returns a stream of coreference clusters with antecedents notated. */
service CoreferenceResolver {
    rpc ResolveAntecedents(TokenRequest) returns (stream CorefCluster);
}

message TokenRequest {
    repeated string tokens = 1;
}

message CorefMention {
    int32 token_index = 1;
    int32 start_mention = 2;
    int32 end_mention = 3;
}

message CorefCluster {
    repeated CorefMention mentions = 1;
    CorefMention antecedent = 2;
}