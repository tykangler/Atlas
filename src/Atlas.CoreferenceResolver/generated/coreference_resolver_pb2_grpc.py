# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import generated.coreference_resolver_pb2 as coreference__resolver__pb2


class CoreferenceResolverStub(object):
    """Interface exported by the server.

    resolve coreferences given a stream of tokens and returns a stream of coreference clusters with antecedents notated. 
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ResolveAntecedents = channel.unary_stream(
                '/Atlas.CoreferenceResolver.CoreferenceResolver/ResolveAntecedents',
                request_serializer=coreference__resolver__pb2.TokenRequest.SerializeToString,
                response_deserializer=coreference__resolver__pb2.CorefCluster.FromString,
                )


class CoreferenceResolverServicer(object):
    """Interface exported by the server.

    resolve coreferences given a stream of tokens and returns a stream of coreference clusters with antecedents notated. 
    """

    def ResolveAntecedents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CoreferenceResolverServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ResolveAntecedents': grpc.unary_stream_rpc_method_handler(
                    servicer.ResolveAntecedents,
                    request_deserializer=coreference__resolver__pb2.TokenRequest.FromString,
                    response_serializer=coreference__resolver__pb2.CorefCluster.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Atlas.CoreferenceResolver.CoreferenceResolver', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CoreferenceResolver(object):
    """Interface exported by the server.

    resolve coreferences given a stream of tokens and returns a stream of coreference clusters with antecedents notated. 
    """

    @staticmethod
    def ResolveAntecedents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Atlas.CoreferenceResolver.CoreferenceResolver/ResolveAntecedents',
            coreference__resolver__pb2.TokenRequest.SerializeToString,
            coreference__resolver__pb2.CorefCluster.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
